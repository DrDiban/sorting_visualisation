{"version":3,"sources":["BarMS.js","BarQS.js","BarSS.js","BarIS.js","Header.js","Mergesort.js","Quicksort.js","Selectionsort.js","Insertionsort.js","App.js","reportWebVitals.js","index.js"],"names":["Bar","props","old_value","new_value","bottom_value","top_value","bottom_color","top_color","React","createElement","className","style","color","textAlign","fontSize","concat","height","backgroundColor","width","barWidth","lineHeight","type","full_value","full_color","Fragment","BarSS","BarIS","Header","margin","padding","border","min","max","id","value","cursorValueSpeed","background","cursor","onChange","handleCursorChange","disabled","sortingStatus","cursorValueArraySize","handleCursorChangeArraySize","sortingAlgo","onClick","setAlgo","marginRight","paddingLeft","merge","a","aux","lo","mid","hi","animation","mini_animation","k","i","j","push","position","sort","length","position_lo","old_value_lo","new_value_lo","position_j","old_value_j","new_value_j","v","exch","position_i","old_value_i","new_value_i","partition","swap","Selectionsort","n","arr","Array","cur_best","Insertionsort","position_j_minus_1","old_value_j_minus_1","new_value_j_minus_1","App","arrSize","setArrSize","useState","setArr","generateRandomArr","setSortingAlgo","setSortingStatus","setCursorValueSpeed","setCursorValueArraySize","setBarWidth","setFontSize","algorithmSpeed","generateRandomNumber","Math","floor","random","size","arr_gen","delay","ms","Promise","resolve","setTimeout","async","sortArrMergeSort","new_arr","len","mergeSort","revert_to_new","flushSync","updatedArr","sortArrQuickSort","quickSort","cur_loc","swap_j_final_pos","swap_lo_final_pos","swap_j_final_new_value","swap_lo_final_new_value","barMS","map","BarMS","barQS","BarQS","barSS","barIS","algorithm","event","target","value_at_0","value_at_100","x","round","display","justifyContent","alignItems","flexDirection","flexBasis","flexGrow","flexShrink","gap","selectionSort","position_i_swap","position_j_swap","sortArrSelectionSort","insertionSort","last_position_value_check","last_position_j_swap","last_position_j_1_swap","sortArrInsertionSort","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9155daf8.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Bar(props) {\n\n    const old_value = props.old_value\n    const new_value = props.new_value\n    let bottom_value = 0\n    let top_value = 0\n    let bottom_color = 'grey'\n    let top_color = 'black'\n    if (old_value > new_value) {\n        bottom_value = new_value\n        bottom_color = 'black'\n        top_value = old_value - new_value\n        top_color = 'grey'\n    }\n\n    else if (old_value < new_value) {\n        bottom_value = old_value\n        top_value = new_value - old_value\n    }\n\n    else {\n        bottom_value = new_value\n        bottom_color = 'black'\n    }\n\n    return (\n\n\n        <div className=\"container\" >\n            <div style={{ color: \"pink\", textAlign: \"center\", fontSize: `${props.fontSize}px` }}>{props.old_value}</div>\n            <div className=\"bar-arr-2\" style={{ height: `${top_value}px`, backgroundColor: `${top_color}` , width:`${props.barWidth}px`}}></div>\n            <div className=\"bar-arr\" style={{ height: `${bottom_value}px`, backgroundColor: `${bottom_color}`, lineHeight: `${bottom_value}px` , width:`${props.barWidth}px`}}></div>\n            \n        </div>\n    )\n}","import React from \"react\"\n\nexport default function Bar(props) {\n\n    const old_value = props.old_value\n    const new_value = props.new_value\n    const type = props.type\n\n    let bottom_value = 0\n    let top_value = 0\n    let bottom_color = 'grey'\n    let top_color = 'black'\n    let full_value = old_value\n    let full_color = 'grey'\n    if (type === \"start_point\") {\n        full_value = old_value\n        full_color = 'red'\n    }\n\n    else if (type === \"i_pos_value_check\") {\n        full_value = old_value\n        full_color = 'yellow'\n    }\n\n    else if (type === \"j_pos_value_check\") {\n        full_value = old_value\n        full_color = 'yellow'\n    }\n\n\n    else if (type === \"swap_position_i_j\" || type === \"swap_position_lo_j\") {\n        if (old_value > new_value) {\n            bottom_value = new_value\n            bottom_color = 'black'\n            top_value = old_value - new_value\n            top_color = 'grey'\n        }\n\n        else if (old_value < new_value) {\n            bottom_value = old_value\n            top_value = new_value - old_value\n        }\n\n        else {\n            bottom_value = new_value\n            bottom_color = 'black'\n        }\n    }\n    else if (type === \"ordered\") {\n        full_value = new_value\n        full_color = 'black'\n    }\n\n\n\n    return (\n        <div className=\"container\">\n            <div style={{ color: \"pink\", textAlign: \"center\" , fontSize: `${props.fontSize}px`}}>{props.old_value}</div>\n\n            {(type === \"swap_position_i_j\" || type === \"swap_position_lo_j\") && (\n                <>\n                    <div className=\"bar-arr-2\" style={{ height: `${top_value}px`, backgroundColor: `${top_color}` , width:`${props.barWidth}px`}}></div>\n                    <div className=\"bar-arr\" style={{ height: `${bottom_value}px`, backgroundColor: `${bottom_color}` , width:`${props.barWidth}px`}}></div>\n                </>\n            )}\n\n            {type !== \"swap_position_i_j\" && type !== \"swap_position_lo_j\" && (\n                <div className=\"bar-arr\" style={{ height: `${full_value}px`, backgroundColor: `${full_color}` , width:`${props.barWidth}px`}}></div>\n            )}\n        </div>\n    )\n}","import React from \"react\"\n\nexport default function BarSS(props) {\n\n    const old_value = props.old_value\n    const new_value = props.new_value\n    const type = props.type\n\n    let bottom_value = 0\n    let top_value = 0\n    let bottom_color = 'grey'\n    let top_color = 'black'\n    let full_value = old_value\n    let full_color = 'grey'\n\n\n    if (type === \"value_check\") {\n        full_value = old_value\n        full_color = 'yellow'\n    }\n\n    else if (type === \"cur_best\") {\n        full_value = old_value\n        full_color = 'green'\n    }\n\n    else if (type === \"swap_position_i_j\") {\n        if (old_value > new_value) {\n            bottom_value = new_value\n            bottom_color = 'black'\n            top_value = old_value - new_value\n            top_color = 'grey'\n        }\n\n        else if (old_value < new_value) {\n            bottom_value = old_value\n            top_value = new_value - old_value\n        }\n\n        else {\n            bottom_value = new_value\n            bottom_color = 'black'\n        }\n    }\n    else if (type === \"ordered\") {\n        full_value = old_value\n        full_color = 'black'\n    }\n\n\n\n    return (\n        <div className=\"container\">\n            <div style={{ color: \"pink\", textAlign: \"center\", fontSize: `${props.fontSize}px` }}>{props.old_value}</div>\n\n            {(type === \"swap_position_i_j\") && (\n                <>\n                    <div className=\"bar-arr-2\" style={{ height: `${top_value}px`, backgroundColor: `${top_color}`, width:`${props.barWidth}px` }}></div>\n                    <div className=\"bar-arr\" style={{ height: `${bottom_value}px`, backgroundColor: `${bottom_color}`, width:`${props.barWidth}px` }}></div>\n                </>\n            )}\n\n            {type !== \"swap_position_i_j\" && (\n                <div className=\"bar-arr\" style={{ height: `${full_value}px`, backgroundColor: `${full_color}`, width:`${props.barWidth}px` }}></div>\n            )}\n        </div>\n    )\n}","import React from \"react\"\n\nexport default function BarIS(props) {\n\n    const old_value = props.old_value\n    const new_value = props.new_value\n    const type = props.type\n\n    let bottom_value = 0\n    let top_value = 0\n    let bottom_color = 'grey'\n    let top_color = 'black'\n    let full_value = old_value\n    let full_color = 'grey'\n\n\n\n    if (type === \"value_check\") {\n        full_value = old_value\n        full_color = 'yellow'\n    }\n\n\n    else if (type === \"swap_position_j_and_j_1\") {\n        if (old_value > new_value) {\n            bottom_value = new_value\n            bottom_color = 'black'\n            top_value = old_value - new_value\n            top_color = 'grey'\n        }\n\n        else if (old_value < new_value) {\n            bottom_value = old_value\n            top_value = new_value - old_value\n        }\n\n        else {\n            bottom_value = new_value\n            bottom_color = 'black'\n        }\n    }\n    else if (type === \"ordered\") {\n        full_value = old_value\n        full_color = 'black'\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div style={{ color: \"pink\", textAlign: \"center\", fontSize: `${props.fontSize}px` }}>{props.old_value}</div>\n\n            {(type === \"swap_position_j_and_j_1\") && (\n                <>\n                    <div className=\"bar-arr-2\" style={{ height: `${top_value}px`, backgroundColor: `${top_color}`, width: `${props.barWidth}px` }}></div>\n                    <div className=\"bar-arr\" style={{ height: `${bottom_value}px`, backgroundColor: `${bottom_color}`, width: `${props.barWidth}px` }}></div>\n                </>\n            )}\n            {type !== \"swap_position_j_and_j_1\" && (\n                <div className=\"bar-arr\" style={{ height: `${full_value}px`, backgroundColor: `${full_color}`, width: `${props.barWidth}px` }}></div>\n            )}\n        </div>\n    )\n}","import React from 'react';\nimport './index.css';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\n\n\n\nfunction Header(props) {\n    return (\n      <header style={{ backgroundColor: 'purple', margin: -20, padding: \"0\", border: 0 }}>\n        <nav>\n          <ul className=\"header-ul\" >\n            <li className=\"header-ul-li-sortingspeed\">\n              <h1 className=\"header-ul-li-sortingspeed-h1\">Change Sorting Speed </h1>\n\n              <input type=\"range\" min=\"0\" max=\"100\" id=\"changeSize\"\n                value={props.cursorValueSpeed}\n                style={{ background: 'white', cursor: 'pointer' }}\n                onChange={props.handleCursorChange}\n                disabled={props.sortingStatus} />\n            </li>\n            <li className=\"header-ul-li-arraysize\" >\n              <h1 className=\"header-ul-li-arraysize-h1\">Change Array Size</h1>\n              <input type=\"range\" min=\"0\" max=\"100\" id=\"changeSize\"\n                value={props.cursorValueArraySize}\n                style={{ background: 'white', cursor: 'pointer' }}\n                onChange={props.handleCursorChangeArraySize}\n                disabled={props.sortingStatus} />\n            </li>\n\n            <div className=\"header-ul-container-algo\" >\n              <h1 className=\"header-ul-li-algo-h1\">Algorithm</h1>\n              <li style={{}}>\n                <button className=\"header-ul-li-selectionsort-button\"\n                  style={{ color: props.sortingAlgo === \"SelectionSort\" ? \"white\" : \"black\" }}\n                  onClick={() => props.setAlgo(\"SelectionSort\")}\n                  disabled={props.sortingStatus}>SelectionSort</button>\n              </li>\n              <li style={{ marginRight: 'auto', paddingLeft: 10 }}>\n                <button className=\"header-ul-li-insertionsort-button\"\n                  style={{ color: props.sortingAlgo === \"InsertionSort\" ? \"white\" : \"black\" }}\n                  onClick={() => props.setAlgo(\"InsertionSort\")}\n                  disabled={props.sortingStatus}>InsertionSort</button>\n              </li>\n              <li className=\"header-ul-li-mergesort\" >\n                <button className=\"header-ul-li-mergesort-button\"\n                  style={{ color: props.sortingAlgo === \"MergeSort\" ? \"white\" : \"black\" }}\n                  onClick={() => props.setAlgo(\"MergeSort\")}\n                  disabled={props.sortingStatus}>MergeSort</button>\n              </li>\n              <li style={{ marginRight: 'auto', paddingLeft: 10 }}>\n                <button className=\"header-ul-li-quicksort-button\"\n                  style={{ color: props.sortingAlgo === \"QuickSort\" ? \"white\" : \"black\" }}\n                  onClick={() => props.setAlgo(\"QuickSort\")}\n                  disabled={props.sortingStatus}>QuickSort</button>\n              </li>\n            </div>\n\n\n          </ul>\n        </nav>\n      </header>\n    );\n}\n\nexport default Header;","function merge(a, aux, lo, mid, hi, animation) {\n    const mini_animation = []\n    // Copy value to auxiliary array\n    for (let k = lo; k <= hi; k++) {\n        aux[k] = a[k];\n    }\n    let i = lo\n    let j = mid + 1;\n\n    for (let k = lo; k <= hi; k++) {\n        if (i > mid) {\n            mini_animation.push({ \"position\": k, \"old_value\": a[k], \"new_value\": aux[j] })\n            a[k] = aux[j++]\n        } else if (j > hi) {\n            mini_animation.push({ \"position\": k, \"old_value\": a[k], \"new_value\": aux[i] })\n            a[k] = aux[i++]\n        } else if (aux[j] < aux[i]) {\n            mini_animation.push({ \"position\": k, \"old_value\": a[k], \"new_value\": aux[j] })\n            a[k] = aux[j++]\n        } else {\n            mini_animation.push({ \"position\": k, \"old_value\": a[k], \"new_value\": aux[i] })\n            a[k] = aux[i++]\n        }\n    }\n    animation.push(mini_animation)\n\n}\n\nexport function Mergesort(a) {\n    const n = a.length\n    const animation = []\n    const aux = new Array(n);\n    let arr = new Array(n)\n    for (let i = 0; i < n; i++) {\n        arr[i] = a[i].old_value\n    }\n\n    for (let len = 1; len < n; len *= 2) {\n        for (let lo = 0; lo < n - len; lo += len + len) {\n            const mid = lo + len - 1;\n            const hi = Math.min(lo + len + len - 1, n - 1);\n            merge(arr, aux, lo, mid, hi, animation);\n        }\n    }\n    return animation\n\n}\n\n","function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nfunction sort(a, lo, hi, animation) {\n\n    if (hi <= lo) {\n\n        if (lo < a.length && lo >= 0) {\n            animation.push([{ \"position\": lo, \"old_value\": a[lo], \"new_value\": 0, \"type\": \"start_point\" }, {\n                \"position_lo\": lo, \"old_value_lo\": a[lo], \"new_value_lo\": a[lo], \"type\": \"swap_position_lo_j\",\n                \"position_j\": lo, \"old_value_j\": a[lo], \"new_value_j\": a[lo]\n            }])\n        }\n\n        return;\n\n    }\n    const j = partition(a, lo, hi, animation);\n\n    sort(a, lo, j - 1, animation);\n    sort(a, j + 1, hi, animation);\n}\n\nfunction partition(a, lo, hi, animation) {\n    const mini_animation = []\n    mini_animation.push({ \"position\": lo, \"old_value\": a[lo], \"new_value\": 0, \"type\": \"start_point\" })\n    var i = lo + 1;\n    var j = hi;\n    const v = a[lo];\n    while (true) {\n        // find item on lo to swap\n\n        while (a[i] < v) {\n            mini_animation.push({ \"position\": i, \"old_value\": a[i], \"new_value\": 0, \"type\": \"i_pos_value_check\" })\n            if (i === hi) {\n                break\n            }\n\n            i += 1\n        }\n        if (i >= lo + 1 && i < j) {\n            mini_animation.push({ \"position\": i, \"old_value\": a[i], \"new_value\": 0, \"type\": \"i_pos_value_check\" })\n        }\n\n        // find item on hi to swap\n        while (v < a[j]) {\n            mini_animation.push({ \"position\": j, \"old_value\": a[j], \"new_value\": 0, \"type\": \"j_pos_value_check\" })\n            if (j === lo) { break }\n\n            j -= 1\n        }\n        if (j > i && j <= hi) {\n            mini_animation.push({ \"position\": j, \"old_value\": a[j], \"new_value\": 0, \"type\": \"j_pos_value_check\" })\n        }\n\n        // check if pointers cross\n        if (i >= j) { break }\n        a = exch(a, i, j);\n        mini_animation.push({\n            \"position_i\": i, \"old_value_i\": a[i], \"new_value_i\": a[j], \"type\": \"swap_position_i_j\",\n            \"position_j\": j, \"old_value_j\": a[j], \"new_value_j\": a[i],\n\n\n\n        })\n        i++\n        j--\n    }\n\n    // put partitioning item v at a[j]\n    a = exch(a, lo, j);\n    mini_animation.push({\n        \"position_lo\": lo, \"old_value_lo\": a[lo], \"new_value_lo\": a[j], \"type\": \"swap_position_lo_j\",\n        \"position_j\": j, \"old_value_j\": a[j], \"new_value_j\": a[lo]\n    })\n\n    // now, a[lo .. j-1] <= a[j] <= a[j+1 .. hi]\n    animation.push(mini_animation)\n    return j;\n}\n\nfunction exch(a, i, j) {\n    const swap = a[i];\n    a[i] = a[j];\n    a[j] = swap;\n    return a\n}\n\n\nexport function Quicksort(a) {\n    const n = a.length\n    const animation = []\n    let arr = new Array(n)\n    for (let i = 0; i < n; i++) {\n        arr[i] = a[i].old_value\n    }\n    // arr = shuffleArray(arr)\n\n\n    sort(arr, 0, arr.length - 1, animation)\n    return animation\n}","function sort(a, animation) {\n    const length = a.length\n    for (let i = 0; i < length - 1; i++) {\n        let cur_best = i\n        const mini_animation = []\n        for (let j = i + 1; j < length; j++) {\n            mini_animation.push({ \"position\": j, \"old_value\": a[j], \"new_value\": 0, \"type\": \"value_check\" })\n            if (a[j] < a[cur_best]) {\n                mini_animation.push({ \"position\": j, \"old_value\": a[j], \"new_value\": 0, \"type\": \"cur_best\" })\n                cur_best = j\n            }\n\n\n        }\n        a = exch(a, i, cur_best);\n        mini_animation.push({\n            \"position_i\": i, \"old_value_i\": a[i], \"new_value_i\": a[cur_best], \"type\": \"swap_position_i_j\",\n            \"position_j\": cur_best, \"old_value_j\": a[cur_best], \"new_value_j\": a[i]\n        })\n        animation.push(mini_animation)\n    }\n}\n\n\nfunction exch(a, i, j) {\n    const swap = a[i];\n    a[i] = a[j];\n    a[j] = swap;\n    return a\n}\n\n\nexport function Selectionsort(a) {\n    const n = a.length\n    const animation = []\n    let arr = new Array(n)\n    for (let i = 0; i < n; i++) {\n        arr[i] = a[i].old_value\n    }\n    sort(arr, animation)\n    return animation\n}","function sort(a, animation) {\n    const length = a.length\n    for (let i = 1; i < length; i++) {\n        const mini_animation = []\n        for (let j = i; j > 0; j--) {\n            mini_animation.push({ \"position\": j, \"old_value\": a[j], \"new_value\": 0, \"type\": \"value_check\" })\n            if (a[j] < a[j - 1]) {\n                a = exch(a, j, j - 1);\n                mini_animation.push({\n                    \"position_j\": j, \"old_value_j\": a[j], \"new_value_j\": a[j - 1], \"type\": \"swap_position_j_and_j_1\",\n                    \"position_j_minus_1\": j - 1, \"old_value_j_minus_1\": a[j - 1], \"new_value_j_minus_1\": a[j]\n                })\n\n            }\n            else {\n                break\n            }\n\n\n        }\n        animation.push(mini_animation)\n\n    }\n}\n\n\nfunction exch(a, i, j) {\n    const swap = a[i];\n    a[i] = a[j];\n    a[j] = swap;\n    return a\n}\n\n\nexport function Insertionsort(a) {\n\n    const n = a.length\n    const animation = []\n    let arr = new Array(n)\n    for (let i = 0; i < n; i++) {\n        arr[i] = a[i].old_value\n    }\n\n\n    sort(arr, animation)\n    return animation\n}","import React from \"react\"\nimport { flushSync } from \"react-dom\"\nimport BarMS from \"./BarMS\"\nimport BarQS from \"./BarQS\"\nimport BarSS from \"./BarSS\"\nimport BarIS from \"./BarIS\"\nimport Header from \"./Header\"\n\nimport { Mergesort as mergeSort } from \"./Mergesort\"\nimport { Quicksort as quickSort } from \"./Quicksort\"\nimport { Selectionsort as selectionSort } from \"./Selectionsort\"\nimport { Insertionsort as insertionSort } from \"./Insertionsort\"\n// import {BarChart, Bar, Line} from 'recharts';\n\nfunction App() {\n  const min = 1\n  const max = 450\n\n  const [arrSize, setArrSize] = React.useState(10)\n  const [arr, setArr] = React.useState(generateRandomArr(min, max, arrSize))\n  const [sortingAlgo, setSortingAlgo] = React.useState(\"SelectionSort\")\n  const [sortingStatus, setSortingStatus] = React.useState(false)\n  const [cursorValueSpeed, setCursorValueSpeed] = React.useState(0);\n  const [cursorValueArraySize, setCursorValueArraySize] = React.useState(0);\n  const [barWidth, setBarWidth] = React.useState(80)\n  const [fontSize, setFontSize] = React.useState(35)\n\n  function interpolate(value_at_0, value_at_100, x) {\n    return Math.round(value_at_0 + (x / 100) * (value_at_100 - value_at_0));\n  }\n  // For setting user algoritmn choice\n  function userSortingAlgo(algorithm) {\n    setSortingAlgo(algorithm)\n  }\n\n  let algorithmSpeed = 600 * (100 - cursorValueSpeed) / 100\n  function handleCursorChange(event) {\n    // Update the cursorValue state when the user moves the cursor\n    setCursorValueSpeed(event.target.value);\n  };\n\n  function handleCursorChangeArraySize(event) {\n\n    setCursorValueArraySize(event.target.value);\n    setArrSize(interpolate(10, 65, event.target.value))\n    setArr(generateRandomArr(min, max, arrSize))\n    // Determine bar width based on number of bars\n    // Break down to smaller range, so that the transition is smoother\n    if (event.target.value <= 12) {\n      setBarWidth(80);\n      setFontSize(35);\n    }\n    else if (event.target.value <= 16) {\n      setBarWidth(70);\n      setFontSize(32);\n    }\n    else if (event.target.value <= 20) {\n      setBarWidth(60);\n      setFontSize(30);\n    }\n    else if (event.target.value <= 28) {\n      setBarWidth(40);\n      setFontSize(18);\n    }\n    else if (event.target.value <= 32) {\n      setBarWidth(30);\n      setFontSize(0);\n    }\n    else if (event.target.value <= 36) {\n      setBarWidth(20);\n      setFontSize(0);\n    }\n    else if (event.target.value <= 40) {\n      setBarWidth(15);\n      setFontSize(0);\n    }\n    else if (event.target.value <= 48) {\n      setBarWidth(12);\n      setFontSize(0);\n    }\n    else {\n      setBarWidth(10);\n      setFontSize(0);\n    }\n\n  };\n\n\n  // For setting user algoritmn choice\n  function userSortingAlgo(algorithm) {\n    setSortingAlgo(algorithm)\n  }\n\n  function generateRandomNumber(min, max) {\n    let x = Math.floor((Math.random() * max) + min);\n    return x\n  }\n\n  function generateRandomArr(min, max, size) {\n    const arr_gen = []\n    for (let i = 0; i < size; i++) {\n      arr_gen.push({ \"old_value\": generateRandomNumber(min, max), \"new_value\": 0, \"type\": \"normal\" })\n    }\n    return arr_gen\n  }\n\n\n  function resetArr() {\n    setArr(generateRandomArr(min, max, arrSize))\n  }\n\n  // quickSort(generateRandomArr(min, max, size))\n  const delay = ms => new Promise(\n    resolve => setTimeout(resolve, ms)\n  );\n\n\n\n  // Mergesort\n  async function sortArrMergeSort() {\n    setSortingStatus(true)\n\n    var new_arr = new Array(arr.length);\n    for (let i = 0; i < arr.length; i++) {\n      new_arr[i] = arr[i]\n    }\n    let animation = []\n    animation = mergeSort(new_arr)\n\n    for (let i = 0; i < animation.length; i++) {\n      let revert_to_new = []\n      for (let j = 0; j < animation[i].length; j++) {\n        await delay(algorithmSpeed);\n        flushSync(() => {\n\n          const updatedArr = [...arr]; // Create a new array based on previous state\n\n          // Modify the array based on animation[i][j]\n          updatedArr[animation[i][j].position].old_value = animation[i][j].old_value;\n          updatedArr[animation[i][j].position].new_value = animation[i][j].new_value;\n          revert_to_new.push(animation[i][j].position)\n          setArr(updatedArr);\n        })\n\n          // Return the updated state\n          ;\n      }\n      const updatedArr = [...arr]\n      await delay(algorithmSpeed);\n      for (let k = 0; k < revert_to_new.length; k++) {\n\n        updatedArr[revert_to_new[k]].old_value = updatedArr[revert_to_new[k]].new_value\n        updatedArr[revert_to_new[k]].new_value = 0;\n\n\n      }\n      setArr(updatedArr);\n\n    }\n    setSortingStatus(false)\n  }\n\n  // Quicksort\n  async function sortArrQuickSort() {\n    setSortingStatus(true)\n\n    var new_arr = new Array(arr.length);\n    for (let i = 0; i < arr.length; i++) {\n      new_arr[i] = arr[i]\n    }\n    let animation = []\n    animation = quickSort(new_arr)\n\n    for (let i = 0; i < animation.length; i++) {\n      let revert_to_new = []\n      let cur_loc = animation[i][0].position\n      let swap_j_final_pos = 0\n      let swap_lo_final_pos = 0\n      let swap_j_final_new_value = 0\n      let swap_lo_final_new_value = 0\n      for (let j = 1; j < animation[i].length; j++) {\n        await delay(algorithmSpeed);\n\n        flushSync(() => {\n\n          const updatedArr = [...arr]; // Create a new array based on previous state\n          // Modify the array based on animation[i][j]\n          if (animation[i][j].type === \"i_pos_value_check\" || animation[i][j].type === \"j_pos_value_check\") {\n            updatedArr[animation[i][j].position].old_value = animation[i][j].old_value;\n            updatedArr[animation[i][j].position].new_value = animation[i][j].new_value;\n            updatedArr[animation[i][j].position].type = animation[i][j].type;\n            updatedArr[cur_loc].type = \"start_point\";\n\n            if (animation[i][j - 1].type === animation[i][j].type) {\n              updatedArr[animation[i][j - 1].position].type = \"normal\";\n            }\n\n          }\n\n          else if (animation[i][j].type === \"swap_position_i_j\" || animation[i][j].type === \"swap_position_lo_j\") {\n\n            if (animation[i][j - 1].type === \"i_pos_value_check\" || animation[i][j - 1].type === \"j_pos_value_check\") {\n              updatedArr[animation[i][j - 1].position].type = \"normal\";\n\n            }\n\n            if (animation[i][j].type === \"swap_position_i_j\") {\n              updatedArr[animation[i][j].position_i].old_value = animation[i][j].old_value_i;\n              updatedArr[animation[i][j].position_i].new_value = animation[i][j].new_value_i;\n              updatedArr[animation[i][j].position_i].type = animation[i][j].type;\n\n              updatedArr[animation[i][j].position_j].old_value = animation[i][j].old_value_j;\n              updatedArr[animation[i][j].position_j].new_value = animation[i][j].new_value_j;\n              updatedArr[animation[i][j].position_j].type = animation[i][j].type;\n            }\n\n\n            else if (animation[i][j].type === \"swap_position_lo_j\") {\n              updatedArr[animation[i][j].position_lo].old_value = animation[i][j].old_value_lo;\n              updatedArr[animation[i][j].position_lo].new_value = animation[i][j].new_value_lo;\n              updatedArr[animation[i][j].position_lo].type = animation[i][j].type;\n\n              updatedArr[animation[i][j].position_j].old_value = animation[i][j].old_value_j;\n              updatedArr[animation[i][j].position_j].new_value = animation[i][j].new_value_j;\n              updatedArr[animation[i][j].position_j].type = animation[i][j].type;\n\n              swap_j_final_pos = animation[i][j].position_j\n              swap_j_final_new_value = animation[i][j].new_value_j\n              swap_lo_final_pos = animation[i][j].position_lo\n              swap_lo_final_new_value = animation[i][j].new_value_lo\n            }\n          }\n\n          if (animation[i][j - 1].type === \"swap_position_i_j\") {\n            updatedArr[animation[i][j - 1].position_i].type = \"normal\";\n            updatedArr[animation[i][j - 1].position_j].type = \"normal\";\n          }\n\n\n          setArr(updatedArr);\n        })\n\n          // Return the updated state\n          ;\n      }\n      const updatedArr = [...arr]\n      await delay(algorithmSpeed);\n\n      updatedArr[swap_lo_final_pos].type = \"normal\"\n      updatedArr[swap_lo_final_pos].old_value = swap_j_final_new_value\n      updatedArr[swap_lo_final_pos].new_value = swap_j_final_new_value\n\n      updatedArr[swap_j_final_pos].type = \"ordered\"\n      updatedArr[swap_j_final_pos].old_value = swap_lo_final_new_value\n      updatedArr[swap_j_final_pos].new_value = swap_lo_final_new_value\n\n      setArr(updatedArr);\n\n    }\n    const updatedArr = [...arr]\n    for (let i = 0; i < updatedArr.length; i++) {\n      updatedArr[i].type = \"normal\"\n      updatedArr[i].new_value = 0\n    }\n    setSortingStatus(false)\n\n  }\n\n  // SelectionSort\n  async function sortArrSelectionSort() {\n    setSortingStatus(true)\n\n    var new_arr = new Array(arr.length);\n    for (let i = 0; i < arr.length; i++) {\n      new_arr[i] = arr[i]\n    }\n    let animation = []\n    animation = selectionSort(new_arr)\n\n\n    for (let i = 0; i < animation.length; i++) {\n      let cur_best = null\n      let position_i_swap = 0\n      let position_j_swap = 0\n      for (let j = 0; j < animation[i].length; j++) {\n        await delay(algorithmSpeed);\n\n        flushSync(() => {\n\n          const updatedArr = [...arr]; // Create a new array based on previous state\n          // Modify the array based on animation[i][j]\n\n          if (animation[i][j].type === \"value_check\" || animation[i][j].type === \"cur_best\") {\n            if (j > 0 && animation[i][j - 1].type === \"value_check\") {\n              updatedArr[animation[i][j - 1].position].type = \"normal\";\n\n            }\n\n            if (animation[i][j].type === \"cur_best\") {\n              if (cur_best !== null) {\n                updatedArr[cur_best].type = \"normal\";\n              }\n              cur_best = animation[i][j].position\n            }\n            updatedArr[animation[i][j].position].type = animation[i][j].type;\n\n\n          }\n\n          else if (animation[i][j].type === \"swap_position_i_j\") {\n            updatedArr[animation[i][j].position_i].old_value = animation[i][j].old_value_i;\n            updatedArr[animation[i][j].position_i].new_value = animation[i][j].new_value_i;\n            updatedArr[animation[i][j].position_i].type = animation[i][j].type;\n            position_i_swap = animation[i][j].position_i\n\n\n            updatedArr[animation[i][j].position_j].old_value = animation[i][j].old_value_j;\n            updatedArr[animation[i][j].position_j].new_value = animation[i][j].new_value_j;\n            updatedArr[animation[i][j].position_j].type = animation[i][j].type;\n            position_j_swap = animation[i][j].position_j\n\n            if (j > 0 && animation[i][j - 1].type === \"value_check\") {\n              updatedArr[animation[i][j - 1].position].type = \"normal\";\n\n            }\n\n          }\n\n          setArr(updatedArr);\n        })\n\n          // Return the updated state\n          ;\n      }\n      const updatedArr = [...arr]\n      await delay(algorithmSpeed);\n\n      updatedArr[position_j_swap].type = \"normal\"\n      updatedArr[i].type = \"ordered\"\n\n      setArr(updatedArr);\n\n    }\n    const updatedArr = [...arr]\n    for (let i = 0; i < updatedArr.length; i++) {\n      updatedArr[i].type = \"normal\"\n      updatedArr[i].new_value = 0\n    }\n    setSortingStatus(false)\n\n  }\n\n\n  // InsertionSort\n  async function sortArrInsertionSort() {\n    setSortingStatus(true)\n\n    var new_arr = new Array(arr.length);\n    for (let i = 0; i < arr.length; i++) {\n      new_arr[i] = arr[i]\n    }\n    let animation = []\n    animation = insertionSort(new_arr)\n\n\n    for (let i = 0; i < animation.length; i++) {\n      let last_position_value_check = 0\n      let last_position_j_swap = 0\n      let last_position_j_1_swap = 0\n      for (let j = 0; j < animation[i].length; j++) {\n        await delay(algorithmSpeed);\n\n        flushSync(() => {\n\n          const updatedArr = [...arr]; // Create a new array based on previous state\n          // Modify the array based on animation[i][j]\n\n          if (j > 0) {\n            if (animation[i][j - 1].type === \"value_check\") {\n              updatedArr[animation[i][j - 1].position].type = \"ordered\"\n            }\n\n            else if (animation[i][j - 1].type === \"swap_position_j_and_j_1\") {\n              updatedArr[animation[i][j - 1].position_j].type = \"ordered\"\n              updatedArr[animation[i][j - 1].position_j - 1].type = \"ordered\"\n            }\n          }\n\n          if (animation[i][j].type === \"value_check\") {\n            updatedArr[animation[i][j].position].type = animation[i][j].type\n            last_position_value_check = animation[i][j].position\n\n          }\n\n          else if (animation[i][j].type === \"swap_position_j_and_j_1\") {\n            updatedArr[animation[i][j].position_j].old_value = animation[i][j].old_value_j;\n            updatedArr[animation[i][j].position_j].new_value = animation[i][j].new_value_j;\n            updatedArr[animation[i][j].position_j].type = animation[i][j].type;\n            last_position_j_swap = animation[i][j].position_j\n\n            updatedArr[animation[i][j].position_j_minus_1].old_value = animation[i][j].old_value_j_minus_1;\n            updatedArr[animation[i][j].position_j_minus_1].new_value = animation[i][j].new_value_j_minus_1;\n            updatedArr[animation[i][j].position_j_minus_1].type = animation[i][j].type;\n            last_position_j_1_swap = animation[i][j].position_j_minus_1\n          }\n          setArr(updatedArr);\n        })\n\n          // Return the updated state\n          ;\n      }\n      const updatedArr = [...arr]\n      await delay(algorithmSpeed);\n\n      updatedArr[last_position_value_check].type = \"ordered\"\n      updatedArr[last_position_j_swap].type = \"ordered\"\n      updatedArr[last_position_j_1_swap].type = \"ordered\"\n\n\n      setArr(updatedArr);\n\n    }\n    const updatedArr = [...arr]\n    for (let i = 0; i < updatedArr.length; i++) {\n      updatedArr[i].type = \"normal\"\n      updatedArr[i].new_value = 0\n    }\n    setSortingStatus(false)\n\n  }\n\n  const barMS = arr.map(height => {\n    return <BarMS\n      old_value={height.old_value}\n      new_value={height.new_value}\n      barWidth={barWidth}\n      fontSize={fontSize}\n\n    />\n  })\n\n\n  const barQS = arr.map(height => {\n    return <BarQS\n      old_value={height.old_value}\n      new_value={height.new_value}\n      type={height.type}\n      barWidth={barWidth}\n      fontSize={fontSize}\n\n    />\n  })\n\n  const barSS = arr.map(height => {\n    return <BarSS\n      old_value={height.old_value}\n      new_value={height.new_value}\n      type={height.type}\n      barWidth={barWidth}\n      fontSize={fontSize}\n\n    />\n  })\n\n  const barIS = arr.map(height => {\n    return <BarIS\n      old_value={height.old_value}\n      new_value={height.new_value}\n      type={height.type}\n      barWidth={barWidth}\n      fontSize={fontSize}\n\n    />\n  })\n\n\n  return (\n    <div className=\"App\">\n      <div style={{ margin: 0, padding: 0 }}>\n        <Header setAlgo={userSortingAlgo} sortingAlgo={sortingAlgo} sortingStatus={sortingStatus}\n          handleCursorChange={handleCursorChange} cursorValueSpeed={cursorValueSpeed}\n          handleCursorChangeArraySize={handleCursorChangeArraySize} cursorValueArraySize={cursorValueArraySize} />\n        <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center', flexDirection: \"column\" }}>\n          <div style={{height:'530px', flexBasis: \"530px\", flexGrow: 0, flexShrink: 0, display:\"flex\" }}>\n            <h1 style={{display:\"flex\",alignItems: 'flex-end' }}>\n              {sortingAlgo === \"MergeSort\" ? barMS : sortingAlgo === \"QuickSort\" ? barQS : sortingAlgo === \"SelectionSort\" ? barSS : barIS}\n            </h1>\n          </div>\n          <div style={{ flexBasis: \"200px\", flexGrow: 0, flexShrink: 0 }}>\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n              {!sortingStatus &&\n                <div style={{ display: 'flex', gap: '10px' }}>\n                  <button className=\"app-button-reset\" onClick={resetArr}>Reset</button>\n                  <button className=\"app-button-sort\" onClick={sortingAlgo === \"MergeSort\" ? () => sortArrMergeSort() : sortingAlgo === \"QuickSort\" ? () => sortArrQuickSort() : sortingAlgo === \"SelectionSort\" ? () => sortArrSelectionSort() : () => sortArrInsertionSort()}>Sort</button>\n                </div>\n              }\n            </div>\n\n            {sortingStatus &&\n              <>\n                <h1>Sorting In Progress</h1>\n              </>\n            }\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}